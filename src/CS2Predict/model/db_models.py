from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Team(db.Model):
    __tablename__ = 'teams'
    id = db.Column(db.Integer, primary_key=True)
    slug = db.Column(db.String, nullable=False)
    name = db.Column(db.String, nullable=False)
    acronym = db.Column(db.String)
    country_id = db.Column(db.Integer, db.ForeignKey('countries.id'))
    icon_url = db.Column(db.String)
    website_url = db.Column(db.String)
    youtube_url = db.Column(db.String)
    stage_id = db.Column(db.Integer, db.ForeignKey('stages.id'))
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

    matches_won = db.relationship('Match', foreign_keys='Match.winner_team_id', back_populates='winner_team')
    matches_lost = db.relationship('Match', foreign_keys='Match.loser_team_id', back_populates='loser_team')
    matches_as_team1 = db.relationship('Match', foreign_keys='Match.team1_id', back_populates='team1')
    matches_as_team2 = db.relationship('Match', foreign_keys='Match.team2_id', back_populates='team2')
    team_result_metrics = db.relationship('TeamResultMetric', back_populates='team')

class Match(db.Model):
    __tablename__ = 'matches'
    id = db.Column(db.Integer, primary_key=True)
    slug = db.Column(db.String, nullable=False)
    team1_id = db.Column(db.Integer, db.ForeignKey('teams.id'), nullable=False)
    team2_id = db.Column(db.Integer, db.ForeignKey('teams.id'), nullable=False)
    winner_team_id = db.Column(db.Integer, db.ForeignKey('teams.id'))
    loser_team_id = db.Column(db.Integer, db.ForeignKey('teams.id'))
    team1_score = db.Column(db.Integer, nullable=False)
    team2_score = db.Column(db.Integer, nullable=False)
    status = db.Column(db.Integer, nullable=False)
    botype = db.Column(db.Integer, nullable=False)
    start_date = db.Column(db.DateTime, nullable=False)
    end_date = db.Column(db.DateTime, nullable=False)
    parsed_status = db.Column(db.Integer, nullable=False)
    url = db.Column(db.String)
    demo_url = db.Column(db.String)
    discipline = db.Column(db.Integer, nullable=False)
    tournament_id = db.Column(db.Integer, nullable=False)
    stage_id = db.Column(db.Integer)
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

    team1 = db.relationship('Team', foreign_keys=[team1_id], back_populates='matches_as_team1')
    team2 = db.relationship('Team', foreign_keys=[team2_id], back_populates='matches_as_team2')
    winner_team = db.relationship('Team', foreign_keys=[winner_team_id], back_populates='matches_won')
    loser_team = db.relationship('Team', foreign_keys=[loser_team_id], back_populates='matches_lost')

class TeamResultMetric(db.Model):
    __tablename__ = 'team_result_metrics'
    id = db.Column(db.Integer, primary_key=True)
    map_id = db.Column(db.Integer, db.ForeignKey('maps.id'), nullable=False)
    team_id = db.Column(db.Integer, db.ForeignKey('teams.id'), nullable=False)
    kill_count = db.Column(db.Integer, nullable=False)
    death_count = db.Column(db.Integer, nullable=False)
    assist_count = db.Column(db.Integer, nullable=False)
    round_count = db.Column(db.Integer, nullable=False)
    round_won_count = db.Column(db.Integer, nullable=False)
    round_lost_count = db.Column(db.Integer, nullable=False)
    round_won_as_ct_count = db.Column(db.Integer, nullable=False)
    round_lost_as_ct_count = db.Column(db.Integer, nullable=False)
    round_won_as_terro_count = db.Column(db.Integer, nullable=False)
    round_lost_as_terro_count = db.Column(db.Integer, nullable=False)
    pistol_round_won_count = db.Column(db.Integer, nullable=False)
    pistol_round_count = db.Column(db.Integer, nullable=False)
    eco_round_won_count = db.Column(db.Integer, nullable=False)
    eco_round_count = db.Column(db.Integer, nullable=False)
    semi_eco_round_won_count = db.Column(db.Integer, nullable=False)
    semi_eco_round_count = db.Column(db.Integer, nullable=False)
    force_buy_round_won_count = db.Column(db.Integer, nullable=False)
    force_buy_round_count = db.Column(db.Integer, nullable=False)
    bomb_planted_count = db.Column(db.Integer, nullable=False)
    bomb_defused_count = db.Column(db.Integer, nullable=False)
    bomb_exploded_count = db.Column(db.Integer, nullable=False)
    bomb_planted_on_a_count = db.Column(db.Integer, nullable=False)
    bomb_planted_on_b_count = db.Column(db.Integer, nullable=False)
    five_kill_count = db.Column(db.Integer, nullable=False)
    four_kill_count = db.Column(db.Integer, nullable=False)
    three_kill_count = db.Column(db.Integer, nullable=False)
    two_kill_count = db.Column(db.Integer, nullable=False)
    one_kill_count = db.Column(db.Integer, nullable=False)
    trade_kill_count = db.Column(db.Integer, nullable=False)
    trade_death_count = db.Column(db.Integer, nullable=False)
    jump_kill_count = db.Column(db.Integer, nullable=False)
    crouch_kill_count = db.Column(db.Integer, nullable=False)
    flashbang_count = db.Column(db.Integer, nullable=False)
    he_grenade_count = db.Column(db.Integer, nullable=False)
    smoke_count = db.Column(db.Integer, nullable=False)
    molotov_count = db.Column(db.Integer, nullable=False)
    incendiary_count = db.Column(db.Integer, nullable=False)
    decoy_count = db.Column(db.Integer, nullable=False)
    win_four_vsfive = db.Column(db.Integer, nullable=False)
    win_four_vsfive_percent = db.Column(db.Float, nullable=False)
    all_four_vsfive_rounds = db.Column(db.Integer, nullable=False)
    win_five_vsfour = db.Column(db.Integer, nullable=False)
    win_five_vsfour_percent = db.Column(db.Float, nullable=False)
    all_five_vsfour_rounds = db.Column(db.Integer, nullable=False)
    flash_kills = db.Column(db.Integer, nullable=False)
    flash_team_kills = db.Column(db.Integer, nullable=False)
    utility_buy = db.Column(db.Integer, nullable=False)
    utility_use = db.Column(db.Integer, nullable=False)

    map = db.relationship('Map', back_populates='team_result_metrics')
    team = db.relationship('Team', back_populates='team_result_metrics')