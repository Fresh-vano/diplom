// <auto-generated />
using System;
using DataParser.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataParser.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataParser.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DataParser.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("BeginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DemoName")
                        .HasColumnType("text");

                    b.Property<int>("Discipline")
                        .HasColumnType("integer");

                    b.Property<int>("LoserId")
                        .HasColumnType("integer");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer");

                    b.Property<int>("MapName")
                        .HasColumnType("integer");

                    b.Property<int>("MatchID")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("RoundCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerId")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoserId");

                    b.HasIndex("MatchID");

                    b.HasIndex("WinnerId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("DataParser.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BOType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DemoUrl")
                        .HasColumnType("text");

                    b.Property<int>("Discipline")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LoserTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("ParsedStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Team1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Team1Score")
                        .HasColumnType("integer");

                    b.Property<int>("Team2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Team2Score")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentID")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int?>("WinnerTeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoserTeamId");

                    b.HasIndex("StageId");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.HasIndex("TournamentID");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("DataParser.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("ImageData")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("DataParser.Models.PlayerMetric", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("ADR")
                        .HasColumnType("double precision");

                    b.Property<double>("APR")
                        .HasColumnType("double precision");

                    b.Property<double>("ATDs")
                        .HasColumnType("double precision");

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<double>("AverageTimeToKill")
                        .HasColumnType("double precision");

                    b.Property<int>("BombDefused")
                        .HasColumnType("integer");

                    b.Property<int>("BombExploded")
                        .HasColumnType("integer");

                    b.Property<int>("BombPlanted")
                        .HasColumnType("integer");

                    b.Property<int>("Clutch")
                        .HasColumnType("integer");

                    b.Property<int>("ClutchLost")
                        .HasColumnType("integer");

                    b.Property<int>("ClutchWon")
                        .HasColumnType("integer");

                    b.Property<double>("ClutchWonPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("CrouchKill")
                        .HasColumnType("integer");

                    b.Property<double>("DPR")
                        .HasColumnType("double precision");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer");

                    b.Property<int>("Decoy")
                        .HasColumnType("integer");

                    b.Property<int>("EntryHoldKill")
                        .HasColumnType("integer");

                    b.Property<int>("EntryHoldKillLost")
                        .HasColumnType("integer");

                    b.Property<int>("EntryHoldKillWin")
                        .HasColumnType("integer");

                    b.Property<double>("EntryHoldKillWinPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("EntryKill")
                        .HasColumnType("integer");

                    b.Property<int>("EntryKillLost")
                        .HasColumnType("integer");

                    b.Property<int>("EntryKillWin")
                        .HasColumnType("integer");

                    b.Property<double>("EntryKillWinPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("FiveKill")
                        .HasColumnType("integer");

                    b.Property<int>("Flashbang")
                        .HasColumnType("integer");

                    b.Property<int>("FourKill")
                        .HasColumnType("integer");

                    b.Property<int>("HE")
                        .HasColumnType("integer");

                    b.Property<int>("HS")
                        .HasColumnType("integer");

                    b.Property<double>("HSPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("Hits")
                        .HasColumnType("integer");

                    b.Property<int>("Incendiary")
                        .HasColumnType("integer");

                    b.Property<int>("JumpKill")
                        .HasColumnType("integer");

                    b.Property<double>("KAST")
                        .HasColumnType("double precision");

                    b.Property<double>("KD")
                        .HasColumnType("double precision");

                    b.Property<double>("KPR")
                        .HasColumnType("double precision");

                    b.Property<int>("KillThroughSmoke")
                        .HasColumnType("integer");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<int>("MVP")
                        .HasColumnType("integer");

                    b.Property<int>("MapID")
                        .HasColumnType("integer");

                    b.Property<int>("Molotov")
                        .HasColumnType("integer");

                    b.Property<bool>("OW")
                        .HasColumnType("boolean");

                    b.Property<int>("OneKill")
                        .HasColumnType("integer");

                    b.Property<int>("OneVFive")
                        .HasColumnType("integer");

                    b.Property<int>("OneVFiveLost")
                        .HasColumnType("integer");

                    b.Property<int>("OneVFiveWon")
                        .HasColumnType("integer");

                    b.Property<double>("OneVFiveWonPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("OneVFour")
                        .HasColumnType("integer");

                    b.Property<int>("OneVFourLost")
                        .HasColumnType("integer");

                    b.Property<int>("OneVFourWon")
                        .HasColumnType("integer");

                    b.Property<double>("OneVFourWonPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("OneVOne")
                        .HasColumnType("integer");

                    b.Property<int>("OneVOneLost")
                        .HasColumnType("integer");

                    b.Property<int>("OneVOneWon")
                        .HasColumnType("integer");

                    b.Property<double>("OneVOneWonPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("OneVThree")
                        .HasColumnType("integer");

                    b.Property<int>("OneVThreeLost")
                        .HasColumnType("integer");

                    b.Property<int>("OneVThreeWon")
                        .HasColumnType("integer");

                    b.Property<double>("OneVThreeWonPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("OneVTwo")
                        .HasColumnType("integer");

                    b.Property<int>("OneVTwoLost")
                        .HasColumnType("integer");

                    b.Property<int>("OneVTwoWon")
                        .HasColumnType("integer");

                    b.Property<double>("OneVTwoWonPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<double>("RWS")
                        .HasColumnType("double precision");

                    b.Property<int>("Rage")
                        .HasColumnType("integer");

                    b.Property<int>("RankMax")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<double>("Rating2")
                        .HasColumnType("double precision");

                    b.Property<int>("Rounds")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("Shots")
                        .HasColumnType("integer");

                    b.Property<int>("Smoke")
                        .HasColumnType("integer");

                    b.Property<int>("SurvivedRounds")
                        .HasColumnType("integer");

                    b.Property<int>("TDA")
                        .HasColumnType("integer");

                    b.Property<int>("TDH")
                        .HasColumnType("integer");

                    b.Property<int>("TeamKill")
                        .HasColumnType("integer");

                    b.Property<int>("ThreeKill")
                        .HasColumnType("integer");

                    b.Property<int>("TradeDeath")
                        .HasColumnType("integer");

                    b.Property<int>("TradeKill")
                        .HasColumnType("integer");

                    b.Property<int>("TwoKill")
                        .HasColumnType("integer");

                    b.Property<bool>("VAC")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerMetric");
                });

            modelBuilder.Entity("DataParser.Models.PlayerResultMetric", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("ADR")
                        .HasColumnType("double precision");

                    b.Property<double>("BuhScore")
                        .HasColumnType("double precision");

                    b.Property<double>("EcoWin")
                        .HasColumnType("double precision");

                    b.Property<double>("EntryPerc")
                        .HasColumnType("double precision");

                    b.Property<double>("FlashKills")
                        .HasColumnType("double precision");

                    b.Property<double>("K54321")
                        .HasColumnType("double precision");

                    b.Property<double>("KAST")
                        .HasColumnType("double precision");

                    b.Property<double>("KD")
                        .HasColumnType("double precision");

                    b.Property<int>("MapID")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<double>("Rating2")
                        .HasColumnType("double precision");

                    b.Property<double>("Rating3")
                        .HasColumnType("double precision");

                    b.Property<double>("RoundWin")
                        .HasColumnType("double precision");

                    b.Property<double>("Survived")
                        .HasColumnType("double precision");

                    b.Property<double>("Win4vs5Perc")
                        .HasColumnType("double precision");

                    b.Property<double>("Win5vs4Perc")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerResultMetric");
                });

            modelBuilder.Entity("DataParser.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndReason")
                        .HasColumnType("integer");

                    b.Property<int>("LoserTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("LoserTeamScore")
                        .HasColumnType("integer");

                    b.Property<int>("LoserTeamSide")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Team1MetricId")
                        .HasColumnType("integer");

                    b.Property<int>("Team2MetricId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WinnerTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerTeamScore")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerTeamSide")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LoserTeamId");

                    b.HasIndex("MapId");

                    b.HasIndex("Team1MetricId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("DataParser.Models.RoundPlayerMetric", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<bool>("BombDefused")
                        .HasColumnType("boolean");

                    b.Property<bool>("BombPlanted")
                        .HasColumnType("boolean");

                    b.Property<bool>("ClutchWon")
                        .HasColumnType("boolean");

                    b.Property<int>("CrouchKill")
                        .HasColumnType("integer");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer");

                    b.Property<int>("Decoy")
                        .HasColumnType("integer");

                    b.Property<bool>("EntryKill")
                        .HasColumnType("boolean");

                    b.Property<bool>("FiveKill")
                        .HasColumnType("boolean");

                    b.Property<int>("Flashbang")
                        .HasColumnType("integer");

                    b.Property<bool>("FourKill")
                        .HasColumnType("boolean");

                    b.Property<int>("HE")
                        .HasColumnType("integer");

                    b.Property<int>("HS")
                        .HasColumnType("integer");

                    b.Property<int>("Hits")
                        .HasColumnType("integer");

                    b.Property<int>("Incendiary")
                        .HasColumnType("integer");

                    b.Property<int>("JumpKill")
                        .HasColumnType("integer");

                    b.Property<int>("KillThroughSmoke")
                        .HasColumnType("integer");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<bool>("MVP")
                        .HasColumnType("boolean");

                    b.Property<int>("Molotov")
                        .HasColumnType("integer");

                    b.Property<bool>("OneKill")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<int>("RoundID")
                        .HasColumnType("integer");

                    b.Property<int>("Shots")
                        .HasColumnType("integer");

                    b.Property<int>("Smoke")
                        .HasColumnType("integer");

                    b.Property<int>("TeamKill")
                        .HasColumnType("integer");

                    b.Property<bool>("ThreeKill")
                        .HasColumnType("boolean");

                    b.Property<int>("TradeDeath")
                        .HasColumnType("integer");

                    b.Property<int>("TradeKill")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoKill")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("RoundID");

                    b.ToTable("RoundPlayerMetric");
                });

            modelBuilder.Entity("DataParser.Models.RoundTeamMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EconomyType")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentValue")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MoneySpend")
                        .HasColumnType("integer");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer");

                    b.Property<int>("RoundId1")
                        .HasColumnType("integer");

                    b.Property<int>("StartMoney")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("RoundId")
                        .IsUnique();

                    b.HasIndex("RoundId1");

                    b.HasIndex("TeamId");

                    b.ToTable("RoundTeamMetric");
                });

            modelBuilder.Entity("DataParser.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("StageType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("DataParser.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StageId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("DataParser.Models.TeamName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamName");
                });

            modelBuilder.Entity("DataParser.Models.TeamResultMetric", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AllFiveVSFourRounds")
                        .HasColumnType("integer");

                    b.Property<int>("AllFourVSFiveRounds")
                        .HasColumnType("integer");

                    b.Property<int>("AssistCount")
                        .HasColumnType("integer");

                    b.Property<int>("BombDefusedCount")
                        .HasColumnType("integer");

                    b.Property<int>("BombExplodedCount")
                        .HasColumnType("integer");

                    b.Property<int>("BombPlantedCount")
                        .HasColumnType("integer");

                    b.Property<int>("BombPlantedOnACount")
                        .HasColumnType("integer");

                    b.Property<int>("BombPlantedOnBCount")
                        .HasColumnType("integer");

                    b.Property<int>("CrouchKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("DeathCount")
                        .HasColumnType("integer");

                    b.Property<int>("DecoyCount")
                        .HasColumnType("integer");

                    b.Property<int>("EcoRoundCount")
                        .HasColumnType("integer");

                    b.Property<int>("EcoRoundWonCount")
                        .HasColumnType("integer");

                    b.Property<int>("FiveKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("FlashKills")
                        .HasColumnType("integer");

                    b.Property<int>("FlashTeamKills")
                        .HasColumnType("integer");

                    b.Property<int>("FlashbangCount")
                        .HasColumnType("integer");

                    b.Property<int>("ForceBuyRoundCount")
                        .HasColumnType("integer");

                    b.Property<int>("ForceBuyRoundWonCount")
                        .HasColumnType("integer");

                    b.Property<int>("FourKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("HeGrenadeCount")
                        .HasColumnType("integer");

                    b.Property<int>("IncendiaryCount")
                        .HasColumnType("integer");

                    b.Property<int>("JumpKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("KillCount")
                        .HasColumnType("integer");

                    b.Property<int>("MapID")
                        .HasColumnType("integer");

                    b.Property<int>("MolotovCount")
                        .HasColumnType("integer");

                    b.Property<int>("OneKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("PistolRoundCount")
                        .HasColumnType("integer");

                    b.Property<int>("PistolRoundWonCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundLostAsCtCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundLostAsTerroCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundLostCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundWonAsCtCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundWonAsTerroCount")
                        .HasColumnType("integer");

                    b.Property<int>("RoundWonCount")
                        .HasColumnType("integer");

                    b.Property<int>("SemiEcoRoundCount")
                        .HasColumnType("integer");

                    b.Property<int>("SemiEcoRoundWonCount")
                        .HasColumnType("integer");

                    b.Property<int>("SmokeCount")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("ThreeKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("TradeDeathCount")
                        .HasColumnType("integer");

                    b.Property<int>("TradeKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("TwoKillCount")
                        .HasColumnType("integer");

                    b.Property<int>("UtilityBuy")
                        .HasColumnType("integer");

                    b.Property<int>("UtilityUse")
                        .HasColumnType("integer");

                    b.Property<int>("WinFiveVSFour")
                        .HasColumnType("integer");

                    b.Property<double>("WinFiveVSFourPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("WinFourVSFive")
                        .HasColumnType("integer");

                    b.Property<double>("WinFourVSFivePercent")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamResultMetric");
                });

            modelBuilder.Entity("DataParser.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Discipline")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Prize")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("TeamsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TeamTournament");
                });

            modelBuilder.Entity("DataParser.Models.Map", b =>
                {
                    b.HasOne("DataParser.Models.Team", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Match", "Match")
                        .WithMany("Maps")
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loser");

                    b.Navigation("Match");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("DataParser.Models.Match", b =>
                {
                    b.HasOne("DataParser.Models.Team", "LoserTeam")
                        .WithMany()
                        .HasForeignKey("LoserTeamId");

                    b.HasOne("DataParser.Models.Stage", null)
                        .WithMany("Matches")
                        .HasForeignKey("StageId");

                    b.HasOne("DataParser.Models.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId");

                    b.Navigation("LoserTeam");

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Tournament");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("DataParser.Models.Player", b =>
                {
                    b.HasOne("DataParser.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DataParser.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Country");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DataParser.Models.PlayerMetric", b =>
                {
                    b.HasOne("DataParser.Models.Map", "Map")
                        .WithMany("PlayerMetrics")
                        .HasForeignKey("MapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataParser.Models.PlayerResultMetric", b =>
                {
                    b.HasOne("DataParser.Models.Map", "Map")
                        .WithMany("PlayerResultMetrics")
                        .HasForeignKey("MapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DataParser.Models.Round", b =>
                {
                    b.HasOne("DataParser.Models.Team", "LoserTeam")
                        .WithMany()
                        .HasForeignKey("LoserTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Map", "Map")
                        .WithMany("Rounds")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.RoundTeamMetric", "Team1Metric")
                        .WithMany()
                        .HasForeignKey("Team1MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoserTeam");

                    b.Navigation("Map");

                    b.Navigation("Team1Metric");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("DataParser.Models.RoundPlayerMetric", b =>
                {
                    b.HasOne("DataParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Round", "Round")
                        .WithMany("RoundPlayerMetrics")
                        .HasForeignKey("RoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("DataParser.Models.RoundTeamMetric", b =>
                {
                    b.HasOne("DataParser.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Round", null)
                        .WithOne("Team2Metric")
                        .HasForeignKey("DataParser.Models.RoundTeamMetric", "RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Round");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DataParser.Models.Stage", b =>
                {
                    b.HasOne("DataParser.Models.Tournament", "Tournament")
                        .WithMany("Stages")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("DataParser.Models.Team", b =>
                {
                    b.HasOne("DataParser.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DataParser.Models.Stage", null)
                        .WithMany("Teams")
                        .HasForeignKey("StageId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataParser.Models.TeamName", b =>
                {
                    b.HasOne("DataParser.Models.Team", "Team")
                        .WithMany("AlternativeNames")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DataParser.Models.TeamResultMetric", b =>
                {
                    b.HasOne("DataParser.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DataParser.Models.Tournament", b =>
                {
                    b.HasOne("DataParser.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.HasOne("DataParser.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataParser.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataParser.Models.Map", b =>
                {
                    b.Navigation("PlayerMetrics");

                    b.Navigation("PlayerResultMetrics");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("DataParser.Models.Match", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("DataParser.Models.Round", b =>
                {
                    b.Navigation("RoundPlayerMetrics");

                    b.Navigation("Team2Metric");
                });

            modelBuilder.Entity("DataParser.Models.Stage", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DataParser.Models.Team", b =>
                {
                    b.Navigation("AlternativeNames");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("DataParser.Models.Tournament", b =>
                {
                    b.Navigation("Stages");
                });
#pragma warning restore 612, 618
        }
    }
}
