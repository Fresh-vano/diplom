package Excel

import (
	Analyzer "github.com/Fresh-vano/CS2-Parser/analyzer"
)

type PlayersSheet struct {
	Workbook *Workbook
	Demo     *Analyzer.Demo
	first    bool
}

func (p *PlayersSheet) GetName() string {
	return "Players"
}

func (p *PlayersSheet) GetColumnNames() []interface{} {
	return []interface{}{
		p.Demo.Parser.Header().MapName,
		"Team",
		"Name",
		"Match",
		"Kills",
		"Assists",
		"Deaths",
		"K/D",
		"HS",
		"HS%",
		"Rounds",
		"RWS",
		"KAST",
		"Rating",
		"Rating 2",
		"ATD (s)",
		"5K",
		"4K",
		"3K",
		"2K",
		"1K",
		"Trade kill",
		"Trade death",
		"Team kill",
		"Jump kill",
		"Crouch kill",
		"Bomb planted",
		"Bomb defused",
		"Bomb exploded",
		"MVP",
		"Score",
		"Clutch",
		"Clutch won",
		"Clutch lost",
		"Clutch won %",
		"1v1",
		"1v1 won",
		"1v1 loss",
		"1v1 won %",
		"1v2",
		"1v2 won",
		"1v2 loss",
		"1v2 won %",
		"1v3",
		"1v3 won",
		"1v3 loss",
		"1v3 won %",
		"1v4",
		"1v4 won",
		"1v4 loss",
		"1v4 won %",
		"1v5",
		"1v5 won",
		"1v5 loss",
		"1v5 won %",
		"Entry kill",
		"Entry kill win",
		"Entry kill lost",
		"Entry kill win %",
		"Entry hold kill",
		"Entry hold kill win",
		"Entry hold kill lost",
		"Entry hold kill win %",
		"KPR",
		"APR",
		"DPR",
		"ADR",
		"TDH",
		"TDA",
		"Flashbang",
		"Smoke",
		"HE",
		"Decoy",
		"Molotov",
		"Incendiary",
		"Rank max",
		"VAC",
		"OW",
		"Survived rounds",
		"Hits",
		"Shots",
		"Kill through smoke",
		"Average time to kill",
		"Rage",
	}
}

func (p *PlayersSheet) Generate() {
	for row, player := range p.Demo.Players {
		if player.KillCount == 0 && player.DeathCount == 0 {
			continue
		}
		row++
		cells := []interface{}{
			"",
			player.TeamName,
			player.Name,
			1,
			player.KillCount,
			player.AssistCount,
			player.DeathCount,
			(float64(player.KillCount) / float64(player.DeathCount)),
			player.HeadshotCount,
			player.HeadshotPercent(),
			player.RoundPlayedCount,
			player.EseaRws,
			player.Kast,
			player.RatingHltv,
			player.RatingHltv2,
			player.AverageTimeDeath(),
			player.FiveKillCount,
			player.FourKillCount,
			player.ThreeKillCount,
			player.TwoKillCount,
			player.OneKillCount,
			player.TradeKillCount,
			player.TradeDeathCount,
			player.TeamKillCount,
			player.JumpKillCount,
			player.CrouchKillCount,
			player.BombPlantedCount,
			player.BombDefusedCount,
			player.BombExplodedCount,
			player.RoundMvpCount,
			player.Score,
			player.ClutchCount(),
			player.ClutchWonCount(),
			player.ClutchLostCount(),
			player.ClutchWonPercent(),
			player.Clutch1V1Count(),
			player.Clutch1V1WonCount(),
			player.Clutch1V1LossCount(),
			player.Clutch1V1WonPercent(),
			player.Clutch1V2Count(),
			player.Clutch1V2WonCount(),
			player.Clutch1V2LossCount(),
			player.Clutch1V2WonPercent(),
			player.Clutch1V3Count(),
			player.Clutch1V3WonCount(),
			player.Clutch1V3LossCount(),
			player.Clutch1V3WonPercent(),
			player.Clutch1V4Count(),
			player.Clutch1V4WonCount(),
			player.Clutch1V4LossCount(),
			player.Clutch1V4WonPercent(),
			player.Clutch1V5Count(),
			player.Clutch1V5WonCount(),
			player.Clutch1V5LossCount(),
			player.Clutch1V5WonPercent(),
			len(player.EntryKills),
			player.EntryKillWonCount(),
			player.EntryKillLossCount(),
			player.RatioEntryKill(),
			len(player.EntryHoldKills),
			player.EntryHoldKillWonCount(),
			player.EntryHoldKillLossCount(),
			player.RatioEntryHoldKill(),
			player.KillPerRound(),
			player.AssistPerRound(),
			player.DeathPerRound(),
			player.AverageHealthDamage(),
			player.TotalDamageHealthCount(),
			player.TotalDamageArmorCount(),
			player.FlashbangThrownCount,
			player.SmokeThrownCount,
			player.HeGrenadeThrownCount,
			player.DecoyThrownCount,
			player.MolotovThrownCount,
			player.IncendiaryThrownCount,
			player.RankNumberOld,
			player.IsVacBanned,
			player.IsOverwatchBanned,
			len(p.Demo.Rounds) - player.DeathCount,
			player.HitCount,
			player.ShotCount,
			player.KillThroughSmoke,
			player.AverageTimeKill(),
			player.Rage,
		}
		p.Workbook.AddRowToSheet(p.GetName(), cells)
	}
}
